##package ${package.Controller};
package com.zwl.mall.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.zwl.mall.base.Result;
import com.zwl.mall.base.ResultUtil;
import com.zwl.mall.utils.MapUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.zwl.mall.api.${table.serviceName};
import com.zwl.mall.dao.model.${entity};
/**
 *
 * @author ${author}
 * @since ${date}
 */

@RestController
@RequestMapping("/api#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end


@Autowired
public ${table.serviceName} i${entity}Service;

/**
 * 分页查询数据
 *
 * @param ${table.entityPath} 查询条件
 * @return
 */
##@ResponseBody
@GetMapping("/getPage")
public Result getPage(${entity} ${table.entityPath},int pageNum,int pageSize)throws Exception{
        return ResultUtil.ok(new ${entity}().selectPage(new Page<>(pageNum,pageSize),
        new QueryWrapper<${entity}>().allEq(MapUtil.objectToUnderlineMap(${table.entityPath}),false)));}

/**
 * 根据id获取对象
 *
 * @param ${table.entityPath} 传递的实体
 * @return
 */
##@ResponseBody
@GetMapping("/getByParams")
public Result getByParams(${entity} ${table.entityPath})throws Exception{
        return ResultUtil.ok(new ${entity}().selectOne(new QueryWrapper<${entity}>().allEq(MapUtil.objectToUnderlineMap(${table.entityPath}),false)));
        }




##/**
## * 跳转列表页面
## * @param request
## * @param model
## * @return
## */
##@RequestMapping(method = RequestMethod.GET, value = {"/${table.entityPath}Index" })
##public String index(HttpServletRequest request,Model model){
##        return"${table.entityPath}ListIndex";
##        }
##
##/**
## * 跳转添加页面
## * @param request
## * @param response
## * @param model
## * @return
## */
##@RequestMapping(method = RequestMethod.GET, value = "/${table.entityPath}Add")
##public String ${table.entityPath}Add(HttpServletRequest request,HttpServletResponse response,Model model){
##        try{
##
##
##        }catch(Exception ex){
##        logger.error("${table.entityPath}Add -=- {}",ex.toString());
##        }
##        return"${table.entityPath}Add";
##        }


/**
* 保存
*
* @param ${table.entityPath} 传递的实体
* @return 0 失败  1 成功
*/
@GetMapping("/save")
public Result save(${entity} ${table.entityPath})throws Exception{
        return ResultUtil.ok(${table.entityPath}.insert());
        }

/**
 * 更新
 *
 * @param ${table.entityPath} 传递的实体
 * @return 0 失败  1 成功
 */
@GetMapping("/update")
public Result update(${entity} ${table.entityPath})throws Exception{
        return ResultUtil.ok(${table.entityPath}.update(new QueryWrapper<${entity}>().allEq(MapUtil.objectToUnderlineMap(${table.entityPath}),false)));
        }

/**
 * 保存或更新
 *
 * @param ${table.entityPath} 传递的实体
 * @return 0 失败  1 成功
 */
@GetMapping("/saveOrUpdate")
public Result saveOrUpdate(${entity} ${table.entityPath})throws Exception{
        return ResultUtil.ok(${table.entityPath}.insertOrUpdate());
        }
##/**
## * 根据id删除对象
## * @param id  实体ID
## * @return 0 失败  1 成功
## */
##@ResponseBody
##@RequestMapping(method = RequestMethod.POST, value = "/${table.entityPath}Delete")
##public int ${table.entityPath}Delete(Long id){
##        int count=0;
##        try{
##        count=i${entity}Service.deleteById(id)?1:0;
##        }catch(Exception e){
##        logger.error("${table.entityPath}Delete -=- {}",e.toString());
##        }
##        return count;
##        }
##
##/**
## * 批量删除对象
## * @param item 实体集合ID
## * @return  0 失败  1 成功
## */
##@ResponseBody
##@RequestMapping(method = RequestMethod.POST, value = "/${table.entityPath}BatchDelete")
##public int deleteBatchIds(String item){
##        int count=0;
##        try{
##        List<Long> ids=(List<Long>)JSON.parse(item);
##        count=i${entity}Service.deleteBatchIds(ids)?1:0;
##        }catch(Exception e){
##        logger.error("${table.entityPath}BatchDelete -=- {}",e.toString());
##        }
##        return count;
##        }
##
##
##        }
          }
